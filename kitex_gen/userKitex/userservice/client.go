// Code generated by Kitex v0.3.1. DO NOT EDIT.

package userservice

import (
	"context"
	"douyin-12306/kitex_gen/userKitex"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	RegisterUser(ctx context.Context, Req *userKitex.UserRegisterRequest, callOptions ...callopt.Option) (r *userKitex.UserRegisterResponse, err error)
	LoginUser(ctx context.Context, Req *userKitex.UserLoginRequest, callOptions ...callopt.Option) (r *userKitex.UserLoginResponse, err error)
	QueryUserInfo(ctx context.Context, Req *userKitex.UserInfoRequest, callOptions ...callopt.Option) (r *userKitex.UserInfoResponse, err error)
	RelationAction(ctx context.Context, Req *userKitex.RelationActionRequest, callOptions ...callopt.Option) (r *userKitex.RelationActionResponse, err error)
	QueryFollowList(ctx context.Context, Req *userKitex.FollowListRequest, callOptions ...callopt.Option) (r *userKitex.FollowListResponse, err error)
	QueryFollowerList(ctx context.Context, Req *userKitex.FollowerListRequest, callOptions ...callopt.Option) (r *userKitex.FollowerListResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserServiceClient struct {
	*kClient
}

func (p *kUserServiceClient) RegisterUser(ctx context.Context, Req *userKitex.UserRegisterRequest, callOptions ...callopt.Option) (r *userKitex.UserRegisterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RegisterUser(ctx, Req)
}

func (p *kUserServiceClient) LoginUser(ctx context.Context, Req *userKitex.UserLoginRequest, callOptions ...callopt.Option) (r *userKitex.UserLoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LoginUser(ctx, Req)
}

func (p *kUserServiceClient) QueryUserInfo(ctx context.Context, Req *userKitex.UserInfoRequest, callOptions ...callopt.Option) (r *userKitex.UserInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryUserInfo(ctx, Req)
}

func (p *kUserServiceClient) RelationAction(ctx context.Context, Req *userKitex.RelationActionRequest, callOptions ...callopt.Option) (r *userKitex.RelationActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RelationAction(ctx, Req)
}

func (p *kUserServiceClient) QueryFollowList(ctx context.Context, Req *userKitex.FollowListRequest, callOptions ...callopt.Option) (r *userKitex.FollowListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryFollowList(ctx, Req)
}

func (p *kUserServiceClient) QueryFollowerList(ctx context.Context, Req *userKitex.FollowerListRequest, callOptions ...callopt.Option) (r *userKitex.FollowerListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryFollowerList(ctx, Req)
}
