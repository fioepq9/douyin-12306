// Code generated by Kitex v0.3.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"douyin-12306/kitex_gen/videoKitex"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*videoKitex.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Feed":              kitex.NewMethodInfo(feedHandler, newFeedArgs, newFeedResult, false),
		"PublishAction":     kitex.NewMethodInfo(publishActionHandler, newPublishActionArgs, newPublishActionResult, false),
		"QueryPublishList":  kitex.NewMethodInfo(queryPublishListHandler, newQueryPublishListArgs, newQueryPublishListResult, false),
		"FavoriteAction":    kitex.NewMethodInfo(favoriteActionHandler, newFavoriteActionArgs, newFavoriteActionResult, false),
		"QueryFavoriteList": kitex.NewMethodInfo(queryFavoriteListHandler, newQueryFavoriteListArgs, newQueryFavoriteListResult, false),
		"CommentAction":     kitex.NewMethodInfo(commentActionHandler, newCommentActionArgs, newCommentActionResult, false),
		"QueryCommentList":  kitex.NewMethodInfo(queryCommentListHandler, newQueryCommentListArgs, newQueryCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func feedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videoKitex.FeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videoKitex.VideoService).Feed(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FeedArgs:
		success, err := handler.(videoKitex.VideoService).Feed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FeedResult)
		realResult.Success = success
	}
	return nil
}
func newFeedArgs() interface{} {
	return &FeedArgs{}
}

func newFeedResult() interface{} {
	return &FeedResult{}
}

type FeedArgs struct {
	Req *videoKitex.FeedRequest
}

func (p *FeedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FeedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FeedArgs) Unmarshal(in []byte) error {
	msg := new(videoKitex.FeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FeedArgs_Req_DEFAULT *videoKitex.FeedRequest

func (p *FeedArgs) GetReq() *videoKitex.FeedRequest {
	if !p.IsSetReq() {
		return FeedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FeedArgs) IsSetReq() bool {
	return p.Req != nil
}

type FeedResult struct {
	Success *videoKitex.FeedResponse
}

var FeedResult_Success_DEFAULT *videoKitex.FeedResponse

func (p *FeedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FeedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FeedResult) Unmarshal(in []byte) error {
	msg := new(videoKitex.FeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FeedResult) GetSuccess() *videoKitex.FeedResponse {
	if !p.IsSetSuccess() {
		return FeedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*videoKitex.FeedResponse)
}

func (p *FeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videoKitex.PublishActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videoKitex.VideoService).PublishAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PublishActionArgs:
		success, err := handler.(videoKitex.VideoService).PublishAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PublishActionResult)
		realResult.Success = success
	}
	return nil
}
func newPublishActionArgs() interface{} {
	return &PublishActionArgs{}
}

func newPublishActionResult() interface{} {
	return &PublishActionResult{}
}

type PublishActionArgs struct {
	Req *videoKitex.PublishActionRequest
}

func (p *PublishActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PublishActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PublishActionArgs) Unmarshal(in []byte) error {
	msg := new(videoKitex.PublishActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PublishActionArgs_Req_DEFAULT *videoKitex.PublishActionRequest

func (p *PublishActionArgs) GetReq() *videoKitex.PublishActionRequest {
	if !p.IsSetReq() {
		return PublishActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PublishActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type PublishActionResult struct {
	Success *videoKitex.PublishActionResponse
}

var PublishActionResult_Success_DEFAULT *videoKitex.PublishActionResponse

func (p *PublishActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PublishActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PublishActionResult) Unmarshal(in []byte) error {
	msg := new(videoKitex.PublishActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PublishActionResult) GetSuccess() *videoKitex.PublishActionResponse {
	if !p.IsSetSuccess() {
		return PublishActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PublishActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*videoKitex.PublishActionResponse)
}

func (p *PublishActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func queryPublishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videoKitex.PublishListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videoKitex.VideoService).QueryPublishList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *QueryPublishListArgs:
		success, err := handler.(videoKitex.VideoService).QueryPublishList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryPublishListResult)
		realResult.Success = success
	}
	return nil
}
func newQueryPublishListArgs() interface{} {
	return &QueryPublishListArgs{}
}

func newQueryPublishListResult() interface{} {
	return &QueryPublishListResult{}
}

type QueryPublishListArgs struct {
	Req *videoKitex.PublishListRequest
}

func (p *QueryPublishListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in QueryPublishListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *QueryPublishListArgs) Unmarshal(in []byte) error {
	msg := new(videoKitex.PublishListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryPublishListArgs_Req_DEFAULT *videoKitex.PublishListRequest

func (p *QueryPublishListArgs) GetReq() *videoKitex.PublishListRequest {
	if !p.IsSetReq() {
		return QueryPublishListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryPublishListArgs) IsSetReq() bool {
	return p.Req != nil
}

type QueryPublishListResult struct {
	Success *videoKitex.PublishListResponse
}

var QueryPublishListResult_Success_DEFAULT *videoKitex.PublishListResponse

func (p *QueryPublishListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in QueryPublishListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *QueryPublishListResult) Unmarshal(in []byte) error {
	msg := new(videoKitex.PublishListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryPublishListResult) GetSuccess() *videoKitex.PublishListResponse {
	if !p.IsSetSuccess() {
		return QueryPublishListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryPublishListResult) SetSuccess(x interface{}) {
	p.Success = x.(*videoKitex.PublishListResponse)
}

func (p *QueryPublishListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videoKitex.FavoriteActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videoKitex.VideoService).FavoriteAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FavoriteActionArgs:
		success, err := handler.(videoKitex.VideoService).FavoriteAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FavoriteActionResult)
		realResult.Success = success
	}
	return nil
}
func newFavoriteActionArgs() interface{} {
	return &FavoriteActionArgs{}
}

func newFavoriteActionResult() interface{} {
	return &FavoriteActionResult{}
}

type FavoriteActionArgs struct {
	Req *videoKitex.FavoriteActionRequest
}

func (p *FavoriteActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FavoriteActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FavoriteActionArgs) Unmarshal(in []byte) error {
	msg := new(videoKitex.FavoriteActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FavoriteActionArgs_Req_DEFAULT *videoKitex.FavoriteActionRequest

func (p *FavoriteActionArgs) GetReq() *videoKitex.FavoriteActionRequest {
	if !p.IsSetReq() {
		return FavoriteActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FavoriteActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type FavoriteActionResult struct {
	Success *videoKitex.FavoriteActionResponse
}

var FavoriteActionResult_Success_DEFAULT *videoKitex.FavoriteActionResponse

func (p *FavoriteActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FavoriteActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FavoriteActionResult) Unmarshal(in []byte) error {
	msg := new(videoKitex.FavoriteActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FavoriteActionResult) GetSuccess() *videoKitex.FavoriteActionResponse {
	if !p.IsSetSuccess() {
		return FavoriteActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FavoriteActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*videoKitex.FavoriteActionResponse)
}

func (p *FavoriteActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func queryFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videoKitex.FavoriteListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videoKitex.VideoService).QueryFavoriteList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *QueryFavoriteListArgs:
		success, err := handler.(videoKitex.VideoService).QueryFavoriteList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryFavoriteListResult)
		realResult.Success = success
	}
	return nil
}
func newQueryFavoriteListArgs() interface{} {
	return &QueryFavoriteListArgs{}
}

func newQueryFavoriteListResult() interface{} {
	return &QueryFavoriteListResult{}
}

type QueryFavoriteListArgs struct {
	Req *videoKitex.FavoriteListRequest
}

func (p *QueryFavoriteListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in QueryFavoriteListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *QueryFavoriteListArgs) Unmarshal(in []byte) error {
	msg := new(videoKitex.FavoriteListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryFavoriteListArgs_Req_DEFAULT *videoKitex.FavoriteListRequest

func (p *QueryFavoriteListArgs) GetReq() *videoKitex.FavoriteListRequest {
	if !p.IsSetReq() {
		return QueryFavoriteListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryFavoriteListArgs) IsSetReq() bool {
	return p.Req != nil
}

type QueryFavoriteListResult struct {
	Success *videoKitex.FavoriteListResponse
}

var QueryFavoriteListResult_Success_DEFAULT *videoKitex.FavoriteListResponse

func (p *QueryFavoriteListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in QueryFavoriteListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *QueryFavoriteListResult) Unmarshal(in []byte) error {
	msg := new(videoKitex.FavoriteListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryFavoriteListResult) GetSuccess() *videoKitex.FavoriteListResponse {
	if !p.IsSetSuccess() {
		return QueryFavoriteListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryFavoriteListResult) SetSuccess(x interface{}) {
	p.Success = x.(*videoKitex.FavoriteListResponse)
}

func (p *QueryFavoriteListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videoKitex.CommentActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videoKitex.VideoService).CommentAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CommentActionArgs:
		success, err := handler.(videoKitex.VideoService).CommentAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentActionResult)
		realResult.Success = success
	}
	return nil
}
func newCommentActionArgs() interface{} {
	return &CommentActionArgs{}
}

func newCommentActionResult() interface{} {
	return &CommentActionResult{}
}

type CommentActionArgs struct {
	Req *videoKitex.CommentActionRequest
}

func (p *CommentActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CommentActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CommentActionArgs) Unmarshal(in []byte) error {
	msg := new(videoKitex.CommentActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentActionArgs_Req_DEFAULT *videoKitex.CommentActionRequest

func (p *CommentActionArgs) GetReq() *videoKitex.CommentActionRequest {
	if !p.IsSetReq() {
		return CommentActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type CommentActionResult struct {
	Success *videoKitex.CommentActionResponse
}

var CommentActionResult_Success_DEFAULT *videoKitex.CommentActionResponse

func (p *CommentActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CommentActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CommentActionResult) Unmarshal(in []byte) error {
	msg := new(videoKitex.CommentActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentActionResult) GetSuccess() *videoKitex.CommentActionResponse {
	if !p.IsSetSuccess() {
		return CommentActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*videoKitex.CommentActionResponse)
}

func (p *CommentActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func queryCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videoKitex.CommentListRequset)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videoKitex.VideoService).QueryCommentList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *QueryCommentListArgs:
		success, err := handler.(videoKitex.VideoService).QueryCommentList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryCommentListResult)
		realResult.Success = success
	}
	return nil
}
func newQueryCommentListArgs() interface{} {
	return &QueryCommentListArgs{}
}

func newQueryCommentListResult() interface{} {
	return &QueryCommentListResult{}
}

type QueryCommentListArgs struct {
	Req *videoKitex.CommentListRequset
}

func (p *QueryCommentListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in QueryCommentListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *QueryCommentListArgs) Unmarshal(in []byte) error {
	msg := new(videoKitex.CommentListRequset)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryCommentListArgs_Req_DEFAULT *videoKitex.CommentListRequset

func (p *QueryCommentListArgs) GetReq() *videoKitex.CommentListRequset {
	if !p.IsSetReq() {
		return QueryCommentListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryCommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

type QueryCommentListResult struct {
	Success *videoKitex.CommentListResponse
}

var QueryCommentListResult_Success_DEFAULT *videoKitex.CommentListResponse

func (p *QueryCommentListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in QueryCommentListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *QueryCommentListResult) Unmarshal(in []byte) error {
	msg := new(videoKitex.CommentListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryCommentListResult) GetSuccess() *videoKitex.CommentListResponse {
	if !p.IsSetSuccess() {
		return QueryCommentListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryCommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*videoKitex.CommentListResponse)
}

func (p *QueryCommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Feed(ctx context.Context, Req *videoKitex.FeedRequest) (r *videoKitex.FeedResponse, err error) {
	var _args FeedArgs
	_args.Req = Req
	var _result FeedResult
	if err = p.c.Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishAction(ctx context.Context, Req *videoKitex.PublishActionRequest) (r *videoKitex.PublishActionResponse, err error) {
	var _args PublishActionArgs
	_args.Req = Req
	var _result PublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryPublishList(ctx context.Context, Req *videoKitex.PublishListRequest) (r *videoKitex.PublishListResponse, err error) {
	var _args QueryPublishListArgs
	_args.Req = Req
	var _result QueryPublishListResult
	if err = p.c.Call(ctx, "QueryPublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteAction(ctx context.Context, Req *videoKitex.FavoriteActionRequest) (r *videoKitex.FavoriteActionResponse, err error) {
	var _args FavoriteActionArgs
	_args.Req = Req
	var _result FavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryFavoriteList(ctx context.Context, Req *videoKitex.FavoriteListRequest) (r *videoKitex.FavoriteListResponse, err error) {
	var _args QueryFavoriteListArgs
	_args.Req = Req
	var _result QueryFavoriteListResult
	if err = p.c.Call(ctx, "QueryFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentAction(ctx context.Context, Req *videoKitex.CommentActionRequest) (r *videoKitex.CommentActionResponse, err error) {
	var _args CommentActionArgs
	_args.Req = Req
	var _result CommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryCommentList(ctx context.Context, Req *videoKitex.CommentListRequset) (r *videoKitex.CommentListResponse, err error) {
	var _args QueryCommentListArgs
	_args.Req = Req
	var _result QueryCommentListResult
	if err = p.c.Call(ctx, "QueryCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
